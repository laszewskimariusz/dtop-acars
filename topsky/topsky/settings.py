"""
Django settings for topsky project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse, parse_qsl
import warnings

# Suppress pkg_resources deprecation warning
warnings.filterwarnings("ignore", category=UserWarning, module="rest_framework_simplejwt")

# Logging configuration for debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# load_dotenv is ONLY for local dev
if os.getenv("RAILWAY_STATIC_URL") is None:
    from dotenv import load_dotenv
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is not set")

# Debug: Check SECRET_KEY length (temporary for debugging)
print("SECRET_KEY length:", len(SECRET_KEY) if SECRET_KEY else 0)

# SECURITY WARNING: don't run with debug turned on in production!
# Temporary DEBUG=True to diagnose 502 errors
DEBUG = True  # os.getenv('DEBUG', 'False').lower() == 'true'

# Additional debug info after DEBUG is defined
print("DATABASE_URL exists:", bool(os.getenv("DATABASE_URL")))
print("RAILWAY_STATIC_URL exists:", bool(os.getenv("RAILWAY_STATIC_URL")))
print("DEBUG mode:", DEBUG)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    # 'tailwind',  # Temporarily disabled for debugging
    # 'theme',     # Temporarily disabled for debugging
    'landing',
    'accounts',
    'acars',
]

# Add browser reload in development - disabled for Railway debugging
# if DEBUG:
#     INSTALLED_APPS += ['django_browser_reload']

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add browser reload middleware in development - disabled for Railway debugging
# if DEBUG:
#     MIDDLEWARE += ['django_browser_reload.middleware.BrowserReloadMiddleware']

ROOT_URLCONF = 'topsky.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'topsky.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Parse DATABASE_URL if provided, otherwise use default SQLite
DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL:
    tmpPostgres = urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': tmpPostgres.path.replace('/', ''),
            'USER': tmpPostgres.username,
            'PASSWORD': tmpPostgres.password,
            'HOST': tmpPostgres.hostname,
            'PORT': 5432,
            'OPTIONS': dict(parse_qsl(tmpPostgres.query)),
        }
    }
else:
    # Fallback to SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Production static files configuration
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
] if os.path.exists(BASE_DIR / "static") else []

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Tailwind CSS Configuration
TAILWIND_APP_NAME = 'theme'

# Platform-specific NPM configuration
import platform
print("Platform:", platform.system())
if platform.system() == 'Windows':
    NPM_BIN_PATH = r'C:\Program Files\nodejs\npm.cmd'
else:
    # For Railway/Linux
    NPM_BIN_PATH = '/usr/bin/npm'

# Email Configuration (Resend)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
RESEND_SMTP_PORT = 587
RESEND_SMTP_USERNAME = 'resend'
RESEND_SMTP_HOST = 'smtp.resend.com'
EMAIL_USE_TLS = True

# Auth Settings
LOGIN_URL = '/auth/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Email settings for account verification  
DEFAULT_FROM_EMAIL = 'noreply@topsky.app'
EMAIL_HOST = RESEND_SMTP_HOST
EMAIL_PORT = RESEND_SMTP_PORT
EMAIL_HOST_USER = RESEND_SMTP_USERNAME
EMAIL_HOST_PASSWORD = os.getenv('RESEND_API_KEY')
EMAIL_USE_TLS = True

# Site configuration for password reset emails
SITE_ID = 1

# CSRF and Security settings for production
# Always include production domains for CSRF (needed when DEBUG=True on production)
CSRF_TRUSTED_ORIGINS = [
    'https://topsky.app',
    'https://www.topsky.app',
    'https://dtopsky.topsky.app',
    'https://dtop-acars-production.up.railway.app',  # Railway domain
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

if not DEBUG:
    # Production security settings
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_SECURE = True
    # Don't use SECURE_SSL_REDIRECT when behind proxy like Cloudflare
    # SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Django Rest Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # SessionAuthentication usunięte dla kompatybilności z smartCARS plugin
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        # Usunięto BrowsableAPIRenderer dla czystego JSON API
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# JWT Configuration
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),  # 7 dni dla smartCARS plugin
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS Configuration for smartCARS 3 compatibility
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for SmartCARS client compatibility

# Additional specific origins for smartCARS
CORS_ALLOWED_ORIGINS = [
    "https://smartcars.aero",
    "https://app.smartcars.aero", 
    "https://central.smartcars.aero",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:7172",  # SmartCARS local client
    "http://127.0.0.1:7172",
]

CORS_ALLOW_CREDENTIALS = True

# SmartCARS 3 required headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding', 
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',
    'x-api-version',
    'x-smartcars-version',
    'cache-control',
    'pragma',
]

# Explicitly allow methods SmartCARS uses
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET', 
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Expose headers that SmartCARS might need
CORS_EXPOSE_HEADERS = [
    'content-length',
    'content-type',
    'date',
    'server',
    'x-api-version',
]

# Handle preflight requests properly
CORS_PREFLIGHT_MAX_AGE = 86400

# SmartCARS 3 compatibility - disable automatic slash appending
# SmartCARS doesn't handle redirects well, so we need exact URL matches
APPEND_SLASH = False
